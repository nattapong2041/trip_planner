import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../models/activity.dart';
import '../models/brainstorm_idea.dart';
import '../models/app_error.dart';
import '../repositories/activity_repository.dart';
import '../repositories/mock_activity_repository.dart';
import 'auth_provider.dart';

part 'activity_provider.g.dart';

/// Provider for the ActivityRepository instance
@riverpod
ActivityRepository activityRepository(Ref ref) {
  return MockActivityRepository();
}

/// Notifier for managing activities for a specific trip
@riverpod
class ActivityListNotifier extends _$ActivityListNotifier {
  @override
  Stream<List<Activity>> build(String tripId) {
    final activityRepository = ref.read(activityRepositoryProvider);
    return activityRepository.getTripActivities(tripId).handleError((error, stackTrace) {
      final appError = _handleActivityError(error);
      ref.read(errorNotifierProvider.notifier).showError(appError);
    });
  }
  
  /// Create a new activity
  Future<void> createActivity({
    required String tripId,
    required String place,
    required String activityType,
    String? price,
    String? notes,
  }) async {
    try {
      final user = ref.read(authNotifierProvider).value;
      if (user == null) {
        throw Exception('User must be authenticated to create an activity');
      }
      
      final activityRepository = ref.read(activityRepositoryProvider);
      final now = DateTime.now();
      
      final newActivity = Activity(
        id: '', // Will be generated by repository
        tripId: tripId,
        place: place,
        activityType: activityType,
        price: price,
        notes: notes,
        assignedDay: null, // Starts in activity pool
        dayOrder: null,
        createdBy: user.id,
        createdAt: now,
        brainstormIdeas: [],
      );
      
      await activityRepository.createActivity(newActivity);
      // The stream will automatically update with the new activity
    } catch (error, stackTrace) {
      final appError = _handleActivityError(error);
      ref.read(errorNotifierProvider.notifier).showError(appError);
      rethrow;
    }
  }
  
  /// Update an existing activity
  Future<void> updateActivity(Activity activity) async {
    try {
      final activityRepository = ref.read(activityRepositoryProvider);
      await activityRepository.updateActivity(activity);
      // The stream will automatically update with the changes
    } catch (error, stackTrace) {
      final appError = _handleActivityError(error);
      ref.read(errorNotifierProvider.notifier).showError(appError);
      rethrow;
    }
  }
  
  /// Delete an activity
  Future<void> deleteActivity(String activityId) async {
    try {
      final activityRepository = ref.read(activityRepositoryProvider);
      await activityRepository.deleteActivity(activityId);
      // The stream will automatically update with the removal
    } catch (error, stackTrace) {
      final appError = _handleActivityError(error);
      ref.read(errorNotifierProvider.notifier).showError(appError);
      rethrow;
    }
  }
  
  /// Assign an activity to a specific day
  Future<void> assignActivityToDay(String activityId, String day, int dayOrder) async {
    try {
      final activityRepository = ref.read(activityRepositoryProvider);
      final activity = await activityRepository.getActivityById(activityId);
      
      if (activity == null) {
        throw Exception('Activity not found');
      }
      
      final updatedActivity = activity.copyWith(
        assignedDay: day,
        dayOrder: dayOrder,
      );
      
      await activityRepository.updateActivity(updatedActivity);
    } catch (error, stackTrace) {
      final appError = _handleActivityError(error);
      ref.read(errorNotifierProvider.notifier).showError(appError);
      rethrow;
    }
  }
  
  /// Move an activity back to the activity pool (unassign from day)
  Future<void> moveActivityToPool(String activityId) async {
    try {
      final activityRepository = ref.read(activityRepositoryProvider);
      final activity = await activityRepository.getActivityById(activityId);
      
      if (activity == null) {
        throw Exception('Activity not found');
      }
      
      final updatedActivity = activity.copyWith(
        assignedDay: null,
        dayOrder: null,
      );
      
      await activityRepository.updateActivity(updatedActivity);
    } catch (error, stackTrace) {
      final appError = _handleActivityError(error);
      ref.read(errorNotifierProvider.notifier).showError(appError);
      rethrow;
    }
  }
  
  /// Add a brainstorm idea to an activity
  Future<void> addBrainstormIdea(String activityId, String description) async {
    try {
      final user = ref.read(authNotifierProvider).value;
      if (user == null) {
        throw Exception('User must be authenticated to add brainstorm ideas');
      }
      
      final activityRepository = ref.read(activityRepositoryProvider);
      final brainstormIdea = BrainstormIdea(
        id: '', // Will be generated by repository
        description: description,
        createdBy: user.id,
        createdAt: DateTime.now(),
      );
      
      await activityRepository.addBrainstormIdea(activityId, brainstormIdea);
      // The stream will automatically update with the new brainstorm idea
    } catch (error, stackTrace) {
      final appError = _handleActivityError(error);
      ref.read(errorNotifierProvider.notifier).showError(appError);
      rethrow;
    }
  }
  
  /// Remove a brainstorm idea from an activity
  Future<void> removeBrainstormIdea(String activityId, String ideaId) async {
    try {
      final activityRepository = ref.read(activityRepositoryProvider);
      await activityRepository.removeBrainstormIdea(activityId, ideaId);
      // The stream will automatically update with the removal
    } catch (error, stackTrace) {
      final appError = _handleActivityError(error);
      ref.read(errorNotifierProvider.notifier).showError(appError);
      rethrow;
    }
  }
  
  /// Helper method to convert exceptions to AppError
  AppError _handleActivityError(Object error) {
    if (error.toString().contains('network')) {
      return AppError.network('Network error while managing activities. Please check your connection.');
    } else if (error.toString().contains('permission')) {
      return AppError.permission('You do not have permission to perform this action.');
    } else if (error.toString().contains('not found')) {
      return AppError.validation('Activity not found or no longer exists.');
    } else {
      return AppError.unknown('An error occurred while managing activities. Please try again.');
    }
  }
}

/// Provider for getting a single activity by ID
@riverpod
class ActivityDetailNotifier extends _$ActivityDetailNotifier {
  @override
  Future<Activity?> build(String activityId) async {
    try {
      final activityRepository = ref.read(activityRepositoryProvider);
      return await activityRepository.getActivityById(activityId);
    } catch (error, stackTrace) {
      final appError = AppError.unknown('Failed to load activity details.');
      ref.read(errorNotifierProvider.notifier).showError(appError);
      throw appError;
    }
  }
  
  /// Refresh the activity data
  Future<void> refresh() async {
    ref.invalidateSelf();
    await future;
  }
}

/// Provider for getting activities grouped by assignment status
@riverpod
class ActivityGroupsNotifier extends _$ActivityGroupsNotifier {
  @override
  Future<ActivityGroups> build(String tripId) async {
    final activities = await ref.watch(activityListNotifierProvider(tripId).future);
    
    final poolActivities = <Activity>[];
    final assignedActivities = <String, List<Activity>>{};
    
    for (final activity in activities) {
      if (activity.assignedDay == null) {
        poolActivities.add(activity);
      } else {
        final day = activity.assignedDay!;
        if (!assignedActivities.containsKey(day)) {
          assignedActivities[day] = [];
        }
        assignedActivities[day]!.add(activity);
      }
    }
    
    // Sort activities within each day by dayOrder
    for (final dayActivities in assignedActivities.values) {
      dayActivities.sort((a, b) => (a.dayOrder ?? 0).compareTo(b.dayOrder ?? 0));
    }
    
    return ActivityGroups(
      poolActivities: poolActivities,
      assignedActivities: assignedActivities,
    );
  }
}

/// Data class for grouped activities
class ActivityGroups {
  final List<Activity> poolActivities;
  final Map<String, List<Activity>> assignedActivities;
  
  const ActivityGroups({
    required this.poolActivities,
    required this.assignedActivities,
  });
}