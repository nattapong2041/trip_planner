// Mocks generated by Mockito 5.4.6 from annotations
// in trip_planner/test/integration/firebase_drag_drop_sync_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:trip_planner/models/activity.dart' as _i2;
import 'package:trip_planner/models/activity_image.dart' as _i6;
import 'package:trip_planner/models/brainstorm_idea.dart' as _i5;
import 'package:trip_planner/repositories/firebase_activity_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeActivity_0 extends _i1.SmartFake implements _i2.Activity {
  _FakeActivity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirebaseActivityRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseActivityRepository extends _i1.Mock
    implements _i3.FirebaseActivityRepository {
  MockFirebaseActivityRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i2.Activity>> getTripActivities(String? tripId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTripActivities,
          [tripId],
        ),
        returnValue: _i4.Stream<List<_i2.Activity>>.empty(),
      ) as _i4.Stream<List<_i2.Activity>>);

  @override
  _i4.Future<_i2.Activity> createActivity(_i2.Activity? activity) =>
      (super.noSuchMethod(
        Invocation.method(
          #createActivity,
          [activity],
        ),
        returnValue: _i4.Future<_i2.Activity>.value(_FakeActivity_0(
          this,
          Invocation.method(
            #createActivity,
            [activity],
          ),
        )),
      ) as _i4.Future<_i2.Activity>);

  @override
  _i4.Future<_i2.Activity> updateActivity(_i2.Activity? activity) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateActivity,
          [activity],
        ),
        returnValue: _i4.Future<_i2.Activity>.value(_FakeActivity_0(
          this,
          Invocation.method(
            #updateActivity,
            [activity],
          ),
        )),
      ) as _i4.Future<_i2.Activity>);

  @override
  _i4.Future<void> deleteActivity(String? activityId) => (super.noSuchMethod(
        Invocation.method(
          #deleteActivity,
          [activityId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Activity> addBrainstormIdea(
    String? activityId,
    _i5.BrainstormIdea? idea,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addBrainstormIdea,
          [
            activityId,
            idea,
          ],
        ),
        returnValue: _i4.Future<_i2.Activity>.value(_FakeActivity_0(
          this,
          Invocation.method(
            #addBrainstormIdea,
            [
              activityId,
              idea,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Activity>);

  @override
  _i4.Future<_i2.Activity> removeBrainstormIdea(
    String? activityId,
    String? ideaId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeBrainstormIdea,
          [
            activityId,
            ideaId,
          ],
        ),
        returnValue: _i4.Future<_i2.Activity>.value(_FakeActivity_0(
          this,
          Invocation.method(
            #removeBrainstormIdea,
            [
              activityId,
              ideaId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Activity>);

  @override
  _i4.Future<_i2.Activity> reorderBrainstormIdeas(
    String? activityId,
    List<String>? ideaIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #reorderBrainstormIdeas,
          [
            activityId,
            ideaIds,
          ],
        ),
        returnValue: _i4.Future<_i2.Activity>.value(_FakeActivity_0(
          this,
          Invocation.method(
            #reorderBrainstormIdeas,
            [
              activityId,
              ideaIds,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Activity>);

  @override
  _i4.Future<_i2.Activity> assignActivityToDay(
    String? activityId,
    String? day,
    int? dayOrder, {
    String? timeSlot,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #assignActivityToDay,
          [
            activityId,
            day,
            dayOrder,
          ],
          {#timeSlot: timeSlot},
        ),
        returnValue: _i4.Future<_i2.Activity>.value(_FakeActivity_0(
          this,
          Invocation.method(
            #assignActivityToDay,
            [
              activityId,
              day,
              dayOrder,
            ],
            {#timeSlot: timeSlot},
          ),
        )),
      ) as _i4.Future<_i2.Activity>);

  @override
  _i4.Future<_i2.Activity> moveActivityToPool(String? activityId) =>
      (super.noSuchMethod(
        Invocation.method(
          #moveActivityToPool,
          [activityId],
        ),
        returnValue: _i4.Future<_i2.Activity>.value(_FakeActivity_0(
          this,
          Invocation.method(
            #moveActivityToPool,
            [activityId],
          ),
        )),
      ) as _i4.Future<_i2.Activity>);

  @override
  _i4.Future<void> reorderActivitiesInDay(
    String? tripId,
    String? day,
    List<String>? activityIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #reorderActivitiesInDay,
          [
            tripId,
            day,
            activityIds,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Activity?> getActivityById(String? activityId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActivityById,
          [activityId],
        ),
        returnValue: _i4.Future<_i2.Activity?>.value(),
      ) as _i4.Future<_i2.Activity?>);

  @override
  _i4.Future<_i2.Activity> addImageToActivity(
    String? activityId,
    _i6.ActivityImage? image,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addImageToActivity,
          [
            activityId,
            image,
          ],
        ),
        returnValue: _i4.Future<_i2.Activity>.value(_FakeActivity_0(
          this,
          Invocation.method(
            #addImageToActivity,
            [
              activityId,
              image,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Activity>);

  @override
  _i4.Future<_i2.Activity> removeImageFromActivity(
    String? activityId,
    String? imageId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeImageFromActivity,
          [
            activityId,
            imageId,
          ],
        ),
        returnValue: _i4.Future<_i2.Activity>.value(_FakeActivity_0(
          this,
          Invocation.method(
            #removeImageFromActivity,
            [
              activityId,
              imageId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Activity>);

  @override
  _i4.Future<_i2.Activity> reorderActivityImages(
    String? activityId,
    List<String>? imageIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #reorderActivityImages,
          [
            activityId,
            imageIds,
          ],
        ),
        returnValue: _i4.Future<_i2.Activity>.value(_FakeActivity_0(
          this,
          Invocation.method(
            #reorderActivityImages,
            [
              activityId,
              imageIds,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Activity>);

  @override
  _i4.Future<_i2.Activity> updateImageCaption(
    String? activityId,
    String? imageId,
    String? caption,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateImageCaption,
          [
            activityId,
            imageId,
            caption,
          ],
        ),
        returnValue: _i4.Future<_i2.Activity>.value(_FakeActivity_0(
          this,
          Invocation.method(
            #updateImageCaption,
            [
              activityId,
              imageId,
              caption,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Activity>);
}
